-- USER ROLES TABLE
CREATE TABLE IF NOT EXISTS USER_ROLES(
    USER_ROLE_ID SERIAL PRIMARY KEY,
    USER_ROLE_NAME VARCHAR(255) UNIQUE NOT NULL
);

-- USERS TABLE
CREATE TABLE IF NOT EXISTS USERS (
    USER_ID SERIAL PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    USER_PASSWORD VARCHAR(255) NOT NULL,
    USER_EMAIL VARCHAR(255) UNIQUE NOT NULL,
    USER_ROLE INT NOT NULL,
    FOREIGN KEY (USER_ROLE) REFERENCES USER_ROLES(USER_ROLE_ID) ON DELETE CASCADE
);

-- CONTESTS TABLE
CREATE TABLE IF NOT EXISTS CONTESTS (
    CONTEST_ID SERIAL PRIMARY KEY,
    CONTEST_NAME VARCHAR(255) NOT NULL,
    CONTEST_START_DATE TIMESTAMPTZ NOT NULL,
    CONTEST_DURATION INTERVAL NOT NULL CHECK( CONTEST_DURATION >= INTERVAL '10 minutes')
);

-- PROBLEMS TABLE
CREATE TABLE IF NOT EXISTS PROBLEMS (
    PROBLEM_ID SERIAL PRIMARY KEY,
    PROBLEM_NAME VARCHAR(100) UNIQUE NOT NULL,
    PROBLEM_STATEMENT_URL TEXT NOT NULL,
    PROBLEM_TEST_CASES_URL TEXT NOT NULL,
    PROBLEM_OUTPUTS_URL TEXT NOT NULL,
    PROBLEM_MEMORY_MB_LIMIT INT NOT NULL,
    PROBLEM_TIME_MS_LIMIT INT NOT NULL
);

-- QUIZZES TABLE
CREATE TABLE IF NOT EXISTS QUIZZES (
    QUIZ_ID SERIAL PRIMARY KEY,
    QUIZ_NAME VARCHAR(255) UNIQUE NOT NULL
);
-- QUESTIONS TABLE
CREATE TABLE IF NOT EXISTS QUESTIONS (
    QUESTION_ID SERIAL PRIMARY KEY,
    QUESTION_TEXT TEXT NOT NULL,
    QUIZ_ID INT NOT NULL,
    FOREIGN KEY (QUIZ_ID) REFERENCES QUIZZES(QUIZ_ID) ON DELETE CASCADE
);
-- ANSWERS TABLE
CREATE TABLE IF NOT EXISTS ANSWERS (
    ANSWER_ID SERIAL PRIMARY KEY,
    ANSWER_TEXT TEXT NOT NULL,
    QUESTION_ID INT NOT NULL,
    ANSWER_IS_CORRECT BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID) ON DELETE CASCADE
);

-- QUIZ ATTEMPSTS TABLE
CREATE TABLE IF NOT EXISTS QUIZ_ATTEMPTS (
    QUIZ_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    SCORE INT NOT NULL,
    PRIMARY KEY (QUIZ_ID, USER_ID),
    FOREIGN KEY (QUIZ_ID) REFERENCES QUIZZES (QUIZ_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);
-- SUBMISSIONS TABLE
CREATE TABLE IF NOT EXISTS SUBMISSIONS (
    USER_ID INT NOT NULL,
    PROBLEM_ID INT NOT NULL,
    SUBMISSION_TIME INT CHECK( SUBMISSION_TIME > 0 ),
    SUBMISSION_URL TEXT NOT NULL,
    SUBMISSION_EARNED_SCORE INT NOT NULL DEFAULT 0, 
    SUBMISSION_ANSWER_CDOE VARCHAR(5),

    PRIMARY KEY( USER_ID, PROBLEM_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (PROBLEM_ID) REFERENCES PROBLEMS (PROBLEM_ID) ON DELETE CASCADE
);

-- CONTEST REGISTRIES TABLE
CREATE TABLE IF NOT EXISTS CONTEST_REGISTRIES (
    USER_ID INT NOT NULL,
    CONTEST_ID INT NOT NULL,
    REGISTRY_TIME TIMESTAMPTZ NOT NULL,

    PRIMARY KEY (USER_ID, CONTEST_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (CONTEST_ID) REFERENCES CONTESTS (CONTEST_ID) ON DELETE CASCADE
);
 

-- PROBLEM SETS TABLE
CREATE TABLE IF NOT EXISTS PROBLEM_SETS (
    PROBLEM_ID INT NOT NULL,
    CONTEST_ID INT NOT NULL,
    PROBLEM_LETTER CHAR NOT NULL,
    PRIMARY KEY ( PROBLEM_ID, CONTEST_ID),
    FOREIGN KEY (PROBLEM_ID) REFERENCES PROBLEMS(PROBLEM_ID) ON DELETE CASCADE,
    FOREIGN KEY (CONTEST_ID) REFERENCES CONTESTS(CONTEST_ID) ON DELETE CASCADE
);

INSERT INTO USER_ROLES (USER_ROLE_NAME) VALUES
('STUDENT'),
('PROFESSOR')
